name: postman-newman-containers-acr-aks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NOME_IMAGEM: apifinancas-newman
  CAMINHO_PROJETO_WEBAPP: ./APIFinancas
  CAMINHO_TESTES: ./Tests
  NOME_APLICACAO: apifinancas
  AZURE_RESOURCE_GROUP_K8S: TesteKubernetes
  AZURE_CLUSTER_K8S: AKSCluster
  NAMESPACE_K8S: apifinancasgha  

jobs:
  build-tests-push:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4
      
    - name: Build de imagem
      run: |
        cd ${{ env.CAMINHO_PROJETO_WEBAPP }}
        docker build . --file Dockerfile --tag ${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}:latest
        
    - name: Criação de container para testes com a API
      run: |
        docker run --name api-testes -p 1234:80 -d ${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}:latest
        docker container ls
    - name: Configurar porta da API no arquivo com os testes
      run: |
        cd ${{ env.CAMINHO_TESTES }}
        sed -i 's/5000/1234/' CalculoJurosCompostos.postman_collection.json
    - name: Testes da API REST com Newman
      run: |
        cd ${{ env.CAMINHO_TESTES }}
        echo "** Versão Global do Newman **"
        newman -v
        newman run CalculoJurosCompostos.postman_collection.json -d data-tests.json
    - name: Geração de relatório HTML com os resultados do Newman
      if: always()
      run: |
        cd ${{ env.CAMINHO_TESTES }}
        npm install newman@5.1.2
        echo "** Versão Global do Newman **"
        newman -v
        echo "** Versão Local do Newman **"
        npx newman -v
        npm install newman-reporter-htmlextra@1.21.0
        npx newman run CalculoJurosCompostos.postman_collection.json -d data-tests.json -r htmlextra
        
    - name: Upload como Artifact do Report com resultado dos testes (Postman + Newman)
      uses: actions/upload-artifact@v2.2.3
      env:
        CAMINHO_RESULTADO_TESTES: ${{ env.CAMINHO_TESTES }}/newman/
      if: always()
      with:
        name: resultado-testes
        path: ${{ env.CAMINHO_RESULTADO_TESTES }}
        retention-days: 30
        
    - name: Login no Azure Container Registry
      uses: docker/login-action@v1.9.0
      with:
        registry: ${{ secrets.AZURECR_REGISTRY }}
        username: ${{ secrets.AZURECR_USERNAME }}
        password: ${{ secrets.AZURECR_PASSWORD }}

    - name: Geração de tag com número do Build e Push no Azure Container Registry
      run: |
        docker tag ${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}:latest ${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}:$GITHUB_RUN_NUMBER
        docker push --all-tags ${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}

  deployment-aks:
    needs: [build-tests-push]
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Azure Kubernetes Service - set context - Conectando ao cluster
      uses: Azure/aks-set-context@v1.1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 
        resource-group: ${{ env.AZURE_RESOURCE_GROUP_K8S }}
        cluster-name:  ${{ env.AZURE_CLUSTER_K8S }}

    - name: Azure Kubernetes Service - Criando Secret para acesso ao Container Registry
      uses: Azure/k8s-create-secret@v1.1
      with:
        namespace: ${{ env.NAMESPACE_K8S }}
        container-registry-url: ${{ secrets.AZURECR_REGISTRY }}
        container-registry-username: ${{ secrets.AZURECR_USERNAME }}
        container-registry-password: ${{ secrets.AZURECR_PASSWORD }}
        secret-name: webapp-k8s-secret

    - name: Configurar manifesto de Deployment
      run: |
        sed -i 's/APPLICATION-NAME/${{ env.NOME_APLICACAO }}/' ./manifests/application.yml
        sed -i 's/CR-DEPLOYMENT/${{ secrets.AZURECR_REGISTRY }}/' ./manifests/application.yml
        sed -i 's/IMAGE-DEPLOYMENT/${{ env.NOME_IMAGEM }}/' ./manifests/application.yml
        sed -i 's/TAG-DEPLOYMENT/${{ github.run_number }}/' ./manifests/application.yml
    
    - name: Azure Kubernetes Service - Deployment de Worker Service
      uses: Azure/k8s-deploy@v1.3
      with:
        namespace: ${{ env.NAMESPACE_K8S }}
        manifests: |
          manifests/application.yml
        images: |
          '${{ secrets.AZURECR_REGISTRY }}/${{ env.NOME_IMAGEM }}:${{ github.run_number }}'
        imagepullsecrets: |
          webapp-k8s-secret
          
    - name: Registrar histórico da execução no Kubernetes
      env:
        HISTORICO_DEPLOYMENT: "Workflow = ${{ github.workflow }} :: Execucao = ${{ github.run_number }} :: ${{ github.event.head_commit.message }}"
      run: kubectl annotate deployment ${{ env.NOME_APLICACAO }} kubernetes.io/change-cause="${{ env.HISTORICO_DEPLOYMENT }}" -n ${{ env.NAMESPACE_K8S }}

    - name: Listar histórico de deployments no Kubernetes
      run: kubectl rollout history deployments -n ${{ env.NAMESPACE_K8S }}